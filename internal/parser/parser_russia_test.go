package parser

import (
	"encoding/base64"
	"testing"
)

func TestMain(t *testing.T) {
	// Example encrypted string (replace with your actual encrypted string)
	encryptedString := ""

	// Example password or key (replace with your actual key/password)
	password := "38s91f65nm"
	passwordHash, err := getPasswordHash(password)
	if err != nil {
		t.Error("Error getting password hash:", err)
		return

	}

	encryptedData, err := base64.StdEncoding.DecodeString(encryptedString)
	if err != nil {
		t.Error("Error decoding base64:", err)
		return
	}

	decryptedData, err := decrypt(encryptedData, passwordHash)
	if err != nil {
		t.Error("Error decrypting:", err)
		return
	}

	t.Error("Decrypted data:", string(decryptedData))
}
